{"version":3,"sources":["images/emoji1.png","images/emoji2.png","images/emoji3.png","images/emoji4.png","images/emoji5.png","images/emoji6.png","images/emoji7.png","images/emoji8.png","images/emoji9.png","images/emoji10.png","images/emoji11.png","images/emoji12.png","components/Navbar/Navbar.js","components/Character/Character.js","components/Container/Container.js","components/Footer/Footer.js","components/Banner/Banner.js","images.js","components/App.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","react_default","a","createElement","className","navMsgColor","navMessage","score","highScore","Character","onClick","e","clickEvent","target","src","name","alt","Container","shake","characters","map","i","components_Character_Character","key","Footer","href","Banner","images","emoji1","emoji2","emoji3","emoji4","emoji5","emoji6","emoji7","emoji8","emoji9","emoji10","emoji11","emoji12","ClickyGame","state","allCharacters","_this","shuffleArray","wasClicked","checkClicked","bind","Object","assertThisInitialized","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","_this2","this","prevState","shuffled","includes","setState","setTimeout","components_Navbar_Navbar","components_Banner_Banner","components_Container_Container","components_Footer_Footer","Component","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.2c196d87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/emoji1.87b1c502.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji2.0d3a286f.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji3.d2992595.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji4.f93f2982.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji5.9d7856bb.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji6.9edc5f08.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji7.fc35cad0.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji8.8c23737c.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji9.059e8a26.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji10.44400993.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji11.e3bcf9db.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji12.1d8795f7.png\";","import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = props => (\r\n  <div className=\"navbar \">\r\n    <div>React Clicky Game</div>\r\n    <div className={props.navMsgColor}>{props.navMessage}</div>\r\n    <div>\r\n      Score: {props.score} <span className=\"pipe\">|</span> High Score:{\" \"}\r\n      {props.highScore}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport './Character.css';\r\n\r\nconst Character = props => (\r\n    <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\r\n        <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\r\n    </div>\r\n);\r\n\r\nexport default Character;\r\n","import React from 'react';\r\nimport './Container.css';\r\nimport Character from '../Character';\r\n\r\nconst Container = props => (\r\n\r\n    <div\r\n        className={\r\n            props.shake\r\n                ? 'container d-flex flex-wrap justify-content-center shake'\r\n                : 'container d-flex flex-wrap justify-content-center'\r\n        }\r\n    >\r\n        {props.characters.map((a, i) => <Character name={a} key={i} clickEvent={props.clickEvent} />)}\r\n    </div>\r\n);\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => <div className=\"footer text-center\">Ismael Perez - <a href=\"https://github.com/iperez99\" target=\"_blank\">my Github</a></div>;\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./Banner.css\";\r\n\r\nconst Banner = () => (\r\n    <div className=\"banner text-center d-flex align-items-center\">\r\n        <p className=\"m-0\">\r\n            Click on an image once to earn points. If you click an image more than once, it is game over and the counter will return to zero\r\n    </p>\r\n    </div>\r\n);\r\n\r\nexport default Banner;\r\n","import emoji1 from \"./images/emoji1.png\";\r\nimport emoji2 from \"./images/emoji2.png\";\r\nimport emoji3 from \"./images/emoji3.png\";\r\nimport emoji4 from \"./images/emoji4.png\";\r\nimport emoji5 from \"./images/emoji5.png\";\r\nimport emoji6 from \"./images/emoji6.png\";\r\nimport emoji7 from \"./images/emoji7.png\";\r\nimport emoji8 from \"./images/emoji8.png\";\r\nimport emoji9 from \"./images/emoji9.png\";\r\nimport emoji10 from \"./images/emoji10.png\";\r\nimport emoji11 from \"./images/emoji11.png\";\r\nimport emoji12 from \"./images/emoji12.png\";\r\n\r\nconst images = [\r\n  emoji1,\r\n  emoji2,\r\n  emoji3,\r\n  emoji4,\r\n  emoji5,\r\n  emoji6,\r\n  emoji7,\r\n  emoji8,\r\n  emoji9,\r\n  emoji10,\r\n  emoji11,\r\n  emoji12\r\n];\r\n\r\nexport default images;\r\n","// App.js is where all of the game logic will be//\r\n// dependencies//\r\nimport React, { Component } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport Container from \"./Container\";\r\nimport Footer from \"./Footer\";\r\nimport Banner from \"./Banner\";\r\nimport images from \"../images\";\r\n\r\nclass ClickyGame extends Component {\r\n  state = {\r\n    score: 0,\r\n    highScore: 0,\r\n        //this will be change between colors depending on what is clicked\r\n    navMsgColor: \"\",\r\n\r\n    // contains intro, success, and failure message\r\n    navMessage: \"Click image to start!\",\r\n\r\n    // contains the array of the images\r\n    allCharacters: this.shuffleArray(),\r\n\r\n    // this will track each clicked image element.\r\n    wasClicked: [],\r\n\r\n    // shakes the container image\r\n    shake: false\r\n  };\r\n\r\n  //function binds the current this context to checkClicked to have access to the current state\r\n  // when passed down to the Character component\r\n  clickEvent = this.checkClicked.bind(this);\r\n\r\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\r\n  shuffleArray() {\r\n    // creates a copy of the current characters array to modify it by value, and not by reference\r\n    const newArr = images.slice();\r\n\r\n    // this variable will store the shuffled array\r\n    const shuffleArr = [];\r\n\r\n    // while loop that goes through index and gets spliced from newArr, reducing its length\r\n    while (newArr.length > 0) {\r\n      shuffleArr.push(\r\n        newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]\r\n      );\r\n    }\r\n\r\n    return shuffleArr;\r\n  }\r\n\r\n  checkClicked(clickedElem) {\r\n    // This creates a copy of the wasClicked array to modify it by value, and not by the reference. wasClicked stores all previous clicked images\r\n    const prevState = this.state.wasClicked.slice();\r\n\r\n    // This variable shuffles the images\r\n    const shuffled = this.shuffleArray();\r\n\r\n    // variables to track score\r\n    let score = this.state.score;\r\n    let highScore = this.state.highScore;\r\n\r\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\r\n    if (!this.state.wasClicked.includes(clickedElem)) {\r\n      // if score and highScore are the same, then there is a new highScore value\r\n      if (score === highScore) {\r\n        score++;\r\n        highScore++;\r\n\r\n        // if this is not equal, then only increase the score value\r\n      } else {\r\n        score++;\r\n      }\r\n\r\n      // this changes the state of the clicked item to wasClicked to track that it has been clicked\r\n      prevState.push(clickedElem);\r\n    }\r\n\r\n    // resets the current score if the same element was clicked twice (aka- game over)\r\n    if (this.state.wasClicked.includes(clickedElem)) {\r\n      let score = 0;\r\n      return this.setState({\r\n        score: score,\r\n        highScore: highScore,\r\n        navMsgColor: \"incorrect\",\r\n        navMessage: \"Incorrect guess!\",\r\n        allCharacters: shuffled,\r\n        wasClicked: [],\r\n        shake: true\r\n      });\r\n    }\r\n\r\n    // if this state runs, then the same element has not been clicked twice and then the score is increased\r\n    this.setState({\r\n      score: score,\r\n      highScore: highScore,\r\n      navMsgColor: \"correct\",\r\n      navMessage: \"You Guessed Correctly!\",\r\n      allCharacters: shuffled,\r\n      wasClicked: prevState,\r\n      shake: false\r\n    });\r\n\r\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\r\n    return setTimeout(() => this.setState({ navMsgColor: \"\" }), 500);\r\n  }\r\n\r\n  // render score to the navbar.\r\n  render() {\r\n    const state = this.state;\r\n    return (\r\n      <div>\r\n        <Navbar\r\n          score={state.score}\r\n          highScore={state.highScore}\r\n          navMessage={state.navMessage}\r\n          navMsgColor={state.navMsgColor}\r\n        />\r\n        <Banner />\r\n        <Container\r\n          shake={state.shake}\r\n          characters={state.allCharacters}\r\n          clickEvent={this.clickEvent}\r\n        />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClickyGame;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickyGame from './components/App.js';\nimport './index.css';\n\nReactDOM.render(<ClickyGame />, document.getElementById('root'));"],"sourceRoot":""}